## ----------------------------------------------------------------
##      _____
##     /     \
##    /____   \____
##   / \===\   \==/
##  /___\===\___\/  AVNET
##       \======/
##        \====/    
## ----------------------------------------------------------------
##
## This design is the property of Avnet.  Publication of this
## design is not authorized without written consent from Avnet.
## 
## Please direct any questions to:  technical.support@avnet.com
##
## Disclaimer:
##    Avnet, Inc. makes no warranty for the use of this code or design.
##    This code is provided  "As Is". Avnet, Inc assumes no responsibility for
##    any errors, which may appear in this code, nor does it make a commitment
##    to update the information contained herein. Avnet, Inc specifically
##    disclaims any implied warranties of fitness for a particular purpose.
##                     Copyright(c) 2010 Avnet, Inc.
##                             All rights reserved.
##
## ----------------------------------------------------------------
##
## Create Date:         Feb 18, 2010
## Design Name:         IVK
## Module Name:         ivk_video_det
## Project Name:        IVK
## Target Devices:      Spartan-6
## Avnet Boards:        IVK
##
## Tool versions:       ISE 12.1
##
## Description:         Microprocessor Peripheral Description
##
## Dependencies:        
##
## Revision:            Feb 18, 2010: 1.01 Initial Version
##                      Mar 02, 2010: 1.02 Add optionnal VDMA Write Port
##                      Mar 10, 2010: 1.04 Force FSYNC to active high polarity
##                      Apr 13, 2010: 1.05 Add support for 16bit data width on XSVI input
##                      May 14, 2010: 2.01 Update for 12.1
##
## ----------------------------------------------------------------

BEGIN ivk_video_det

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION DESC = ivk_video_det
OPTION LONG_DESC = Detects video timing

## Bus Interfaces
BUS_INTERFACE BUS = SPLB,             BUS_TYPE = SLAVE,       BUS_STD  = PLBV46
BUS_INTERFACE BUS = XSVI_VIDEO_IN,    BUS_STD = XSVI,         BUS_TYPE = TARGET
BUS_INTERFACE BUS = XSVI_VIDEO_OUT,   BUS_STD = XSVI,         BUS_TYPE = INITIATOR, ISVALID = (C_GEN_XSVI_OUT == 1)
BUS_INTERFACE BUS = XIL_WD_VDMA,      BUS_STD = XIL_VFBC,     BUS_TYPE = INITIATOR, ISVALID = (C_GEN_WD_VDMA  == 1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x200, BUS = SPLB, ADDRESS = BASE, PAIR = C_HIGHADDR
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_BASEADDR
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128), ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB, RANGE = (1:16)
PARAMETER C_SPLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB, RANGE = (1:4)
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128), ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, RANGE = (0, 1)
PARAMETER C_SPLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB, RANGE = (0, 1), ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128)
PARAMETER C_SPLB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SPLB
PARAMETER C_INCLUDE_DPHASE_TIMER = 0, DT = INTEGER, RANGE = (0, 1)
PARAMETER C_FAMILY = spartan3adsp, DT = STRING

PARAMETER C_GEN_FSYNC = 0, DT = integer, RANGE = (0,1)
PARAMETER C_GEN_XSVI_OUT = 1, DT = integer, RANGE = (0,1)
PARAMETER C_GEN_WD_VDMA  = 0, DT = integer, RANGE = (0,1)

## Selectable Video Interface Type
## 0 = CAMERA_INTERFACE
## 1 = DVI_INTERFACE
## 2 = XVSI PORTS
#PARAMETER C_VIDEO_INTERFACE = 0, DT = INTEGER, DESC = VIDEO_INTERFACE, RANGE = (0:2), ASSIGNMENT = REQUIRE, VALUES = (0=CAMERA, 1=DVI, 2=XSVI)
PARAMETER C_XSVII_DATA_WIDTH  = 24, DT = INTEGER, DESC = XSVI_DATA_WIDTH, RANGE = (8, 10, 16, 24)
PARAMETER C_XSVIO_DATA_WIDTH  = 24, DT = INTEGER, DESC = XSVI_DATA_WIDTH, RANGE = (8, 10, 16, 24, 32)
PARAMETER C_VDMA_DATA_WIDTH  = 32, DT = INTEGER, DESC = VDMA_DATA_WIDTH, RANGE = (8, 16, 32)

## PLB Ports
PORT SPLB_Clk = "", DIR = I, SIGIS = CLK, BUS = SPLB
PORT SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB

## Global Reset (asynchronous)
PORT reset              = "", DIR = I
PORT clk                = "", DIR = I

## XSVI Input Port
PORT xsvi_vsync_i        = "vsync",        DIR = I,                                   BUS = XSVI_VIDEO_IN
PORT xsvi_hsync_i        = "hsync",        DIR = I,                                   BUS = XSVI_VIDEO_IN
PORT xsvi_vblank_i       = "vblank",       DIR = I,                                   BUS = XSVI_VIDEO_IN
PORT xsvi_hblank_i       = "hblank",       DIR = I,                                   BUS = XSVI_VIDEO_IN
PORT xsvi_active_video_i = "active_video", DIR = I,                                   BUS = XSVI_VIDEO_IN
PORT xsvi_video_data_i   = "video_data",   DIR = I, VEC = [(C_XSVII_DATA_WIDTH-1):0], BUS = XSVI_VIDEO_IN

## XSVI Output Port
PORT xsvi_vsync_o        = "vsync",        DIR = O,                                   BUS = XSVI_VIDEO_OUT
PORT xsvi_hsync_o        = "hsync",        DIR = O,                                   BUS = XSVI_VIDEO_OUT
PORT xsvi_vblank_o       = "vblank",       DIR = O,                                   BUS = XSVI_VIDEO_OUT
PORT xsvi_hblank_o       = "hblank",       DIR = O,                                   BUS = XSVI_VIDEO_OUT
PORT xsvi_active_video_o = "active_video", DIR = O,                                   BUS = XSVI_VIDEO_OUT
PORT xsvi_video_data_o   = "video_data",   DIR = O, VEC = [(C_XSVIO_DATA_WIDTH-1):0], BUS = XSVI_VIDEO_OUT

## VDMA Write Port
#PORT vdma_wcmd_clk       = "cmd_clk",      DIR = O,                                  BUS = XIL_WD_VDMA
PORT vdma_wd_clk         = "wd_clk",       DIR = O,                                  BUS = XIL_WD_VDMA
PORT vdma_wd_write       = "wd_write",     DIR = O,                                  BUS = XIL_WD_VDMA
PORT vdma_wd_data        = "wd_data",      DIR = O, VEC = [C_VDMA_DATA_WIDTH-1:0],   BUS = XIL_WD_VDMA
PORT vdma_wd_data_be     = "wd_data_be",   DIR = O, VEC = [C_VDMA_DATA_WIDTH/8-1:0], BUS = XIL_WD_VDMA

## Frame Sync Output Port
PORT fsync_o = "", DIR = O, ISVALID = (C_GEN_FSYNC == 1)

## Debug Ports
PORT debug1_o = "", DIR = O, VEC = [(5+C_XSVII_DATA_WIDTH-1):0]
PORT debug2_o = "", DIR = O, VEC = [31:0]

END
