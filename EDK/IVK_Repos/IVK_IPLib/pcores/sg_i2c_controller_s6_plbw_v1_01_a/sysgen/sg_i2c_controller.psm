; ******************************************************************************
; sg_i2c_controller - System Generator based PicoBlaze Controller
; 
;    I2C controller
; 
;    Target FPGA:  Spartan6/Virtex6
;    Author:       Mario Bergeron
;    Revision notes:
;      1.0  2010/07/19  Supported Commands
;                         01h => I2C register write
;                                - start bit
;                                - write byte (device, write)
;                                - write byte (reg addr)
;                                - write byte (reg data)
;                                - stop bit
;                         02h => I2C register read
;                                - start bit
;                                - write byte (device, write)
;                                - write byte (reg addr)
;                                - start bit
;                                - read byte (reg data)
;                                - stop bit
;                         08h => Programmable delay value
;                         10h => Start Bit
;                         11h => Stop Bit
;                         12h => Write Byte
;                         13h => Write Byte Last
;                         14h => Read Byte
;                         15h => Read Byte Last
;
; ******************************************************************************

; Define registers on Picoblaze

; Control and Status
CONSTANT CSR,                  00                  ; control and status register

; I2C interface
CONSTANT I2C_REG,              01                  ; I2C interface register
CONSTANT I2C_SCL_HIGH,         0C                  ; to set SCL high
CONSTANT I2C_SCL_LOW,          08                  ; to set SCL low
CONSTANT I2C_SDA_HIGH,         03                  ; to set SDA high
CONSTANT I2C_SDA_LOW,          02                  ; to set SDA low
CONSTANT I2C_SDA_WE,           02                  ; bit 0 will indicate SDA level

CONSTANT I2C_SCL_PERIOD,       14                  ; 20 microseconds, approximate
CONSTANT I2C_SCL_PERIOD_DIV2,  0A                  ; 10 microseconds, approximate
CONSTANT I2C_SCL_PERIOD_DIV4,  05                  ;  5 microseconds, approximate

; Command Port
CONSTANT CMD_CTRL_REG,         03                  ; Command Control/Status Register
CONSTANT CMD_DAT0_REG,         04                  ; Command Data[ 7: 0] Register
CONSTANT CMD_DAT1_REG,         05                  ; Command Data[15: 8] Register
CONSTANT CMD_DAT2_REG,         06                  ; Command Data[23:16] Register
CONSTANT CMD_DAT3_REG,         07                  ; Command Data[31:24] Register

CONSTANT CMD_I2C_WRITE,        01                  ; Command 1 : I2C Write
CONSTANT CMD_I2C_READ,         02                  ; Command 2 : I2C Read


; ******************************************************************************
; Scratch memory equates
;CONSTANT USER_SW,              00                  ; sw value configured for...
;CONSTANT I2C_ADR_MODE,         10
;CONSTANT I2C_DEVICE_ADR,       11                  ; I2C bus device address
;CONSTANT I2C_START_ADR,        12                  ; memory address within device - 1st byte
;CONSTANT I2C_START_ADR_PLUS1,  13                  ; memory address within device - 2nd byte

; Main loop status flags

; ******************************************************************************
; Register definitions
; the following registers should not be accessed under interrupt
NAMEREG s0,                    ms1                 ; scratch register
NAMEREG s1,                    ms2                 ; scratch register
NAMEREG s2,                    ms3                 ; scratch register
NAMEREG s3,                    ms4                 ; scratch register

;NAMEREG s4,                    mode                ; current mode
NAMEREG s4,                    i2c_dev_adr
NAMEREG s5,                    i2c_reg_adr         ; for i2c reg write
NAMEREG s6,                    i2c_reg_data        ; for i2c reg write

NAMEREG s8,                    i2c_byte            ; i2c transfer byte
NAMEREG s9,                    i2c_ctrl            ; i2c control byte: b0 = ack level
NAMEREG sA,                    delay_length        ; delay subroutine parameter
NAMEREG sB,                    delay_loop          ; delay subroutine internalloop variable
NAMEREG sC,                    delay_value         ; programmable delay value

; for under interrupt:
;NAMEREG sC,                    is1                 ; scratch register
;NAMEREG sD,                    is2                 ; scratch register
;NAMEREG sE,                    is3                 ; scratch register

; useful equates
CONSTANT BIT7,                 80                  ; bit 7 high (used for the test instruction)
CONSTANT BIT6,                 40                  ; bit 6 high (used for the test instruction)
CONSTANT BIT5,                 20                  ; bit 5 high (used for the test instruction)
CONSTANT BIT4,                 10                  ; bit 4 high (used for the test instruction)
CONSTANT BIT3,                 08                  ; bit 3 high (used for the test instruction)
CONSTANT BIT2,                 04                  ; bit 2 high (used for the test instruction)
CONSTANT BIT1,                 02                  ; bit 1 high (used for the test instruction)
CONSTANT BIT0,                 01                  ; bit 0 high (used for the test instruction)

CONSTANT BIT7_COM,             7F                  ; bit 7 low (used for the test instruction)
CONSTANT BIT6_COM,             BF                  ; bit 6 low (used for the test instruction)
CONSTANT BIT5_COM,             DF                  ; bit 5 low (used for the test instruction)
CONSTANT BIT4_COM,             EF                  ; bit 4 low (used for the test instruction)
CONSTANT BIT3_COM,             F7                  ; bit 3 low (used for the test instruction)
CONSTANT BIT2_COM,             FB                  ; bit 2 low (used for the test instruction)
CONSTANT BIT1_COM,             FD                  ; bit 1 low (used for the test instruction)
CONSTANT BIT0_COM,             FE                  ; bit 0 low (used for the test instruction)

; 
; 
; ******************************************************************************
;                    ORG       $00
                    ADDRESS    000
; ******************************************************************************
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Main loop
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

init:               LOAD      delay_value, 10     ; default delay value = 16 (10h)

main:               CALL      PROCESS_COMMAND
                    JUMP      main


; ------------------------------------------------------------------------------
; PROCESS_COMMAND -
; IN:
; OUT:
; Modifies: (ms1, ms2, ms3)
; CALL: i2c_open_for_read, i2c_read_byte_last
; ------------------------------------------------------------------------------
PROCESS_COMMAND:
                    INPUT     ms1, CMD_CTRL_REG   ; read Command Port status
                    AND       ms1, 01             ; mask off other bits
                    SUB       ms1, 01
                    RETURN    NZ                  ; if not ready, return

                    LOAD      ms1, 02             ; Read from Command Port
                    OUTPUT    ms1, CMD_CTRL_REG
                    INPUT     ms1, CMD_DAT3_REG   ; Get Command
                    OUTPUT    ms1, CMD_DAT3_REG   ; (copy command in response)
                    LOAD      ms2, ms1
                    SUB       ms2, 01
                    JUMP      Z, PROCESS_I2C_WRITE; 
                    LOAD      ms2, ms1
                    SUB       ms2, 02
                    JUMP      Z, PROCESS_I2C_READ
                    LOAD      ms2, ms1
                    SUB       ms2, 08
                    JUMP      Z, PROCESS_DELAY_VALUE
                    LOAD      ms2, ms1
                    SUB       ms2, 10
                    JUMP      Z, PROCESS_I2C_SEND_START
                    LOAD      ms2, ms1
                    SUB       ms2, 11
                    JUMP      Z, PROCESS_I2C_SEND_STOP
                    LOAD      ms2, ms1
                    SUB       ms2, 12
                    JUMP      Z, PROCESS_I2C_WRITE_BYTE
                    LOAD      ms2, ms1
                    SUB       ms2, 13
                    JUMP      Z, PROCESS_I2C_WRITE_BYTE_LAST
                    LOAD      ms2, ms1
                    SUB       ms2, 14
                    JUMP      Z, PROCESS_I2C_READ_BYTE
                    LOAD      ms2, ms1
                    SUB       ms2, 15
                    JUMP      Z, PROCESS_I2C_READ_BYTE_LAST
                    
COMMAND_INVALID:    LOAD      ms1, DE             ; Response = 0xDEADBEEF
                    OUTPUT    ms1, CMD_DAT3_REG
                    LOAD      ms1, AD
                    OUTPUT    ms1, CMD_DAT2_REG
                    LOAD      ms1, BE
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, EF
                    OUTPUT    ms1, CMD_DAT0_REG
                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1, CMD_CTRL_REG
                    RETURN

PROCESS_I2C_WRITE:                    
                    INPUT     i2c_dev_adr, CMD_DAT2_REG 
                    OUTPUT    i2c_dev_adr, CMD_DAT2_REG;
                                                  ; (copy device id in response)
                    INPUT     i2c_reg_adr, CMD_DAT1_REG
                    OUTPUT    i2c_reg_adr, CMD_DAT1_REG
                                                  ; (copy address in response)
                    INPUT     i2c_reg_data, CMD_DAT0_REG
                    OUTPUT    i2c_reg_data, CMD_DAT0_REG
                                                  ; (copy data in response)
    
                    CALL      i2c_reg_write       ; Process Request
                    TEST      i2c_ctrl, BIT0
                    JUMP      NZ, COMMAND_FAILED

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_READ:                    
                    INPUT     i2c_dev_adr, CMD_DAT2_REG 
                    OUTPUT    i2c_dev_adr, CMD_DAT2_REG
                                                  ; (copy device id in response)
                    INPUT     i2c_reg_adr, CMD_DAT1_REG   
                    OUTPUT    i2c_reg_adr, CMD_DAT1_REG
                                                  ; (copy address in response)
                    INPUT     i2c_reg_data, CMD_DAT0_REG
   
                    CALL      i2c_reg_read        ; Process Request
                    TEST      i2c_ctrl, BIT0
                    JUMP      NZ, COMMAND_FAILED

                    OUTPUT    i2c_byte, CMD_DAT0_REG
                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_DELAY_VALUE:
                    INPUT     delay_value, CMD_DAT2_REG
                    OUTPUT    delay_value, CMD_DAT2_REG
                                                  ; (copy delay value in response)
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_SEND_START:
                    CALL      i2c_send_start      ; Process Request

                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT2_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN
                    
PROCESS_I2C_SEND_STOP:
                    CALL      i2c_send_stop       ; Process Request

                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT2_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_WRITE_BYTE:
                    INPUT     i2c_byte, CMD_DAT2_REG
                    OUTPUT    i2c_byte, CMD_DAT2_REG
                                                  ; (copy byte in response)
                    CALL      i2c_write_byte      ; Process Request
                    TEST      i2c_ctrl, BIT0
                    JUMP      NZ, COMMAND_FAILED

                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_WRITE_BYTE_LAST:
                    INPUT     i2c_byte, CMD_DAT2_REG
                    OUTPUT    i2c_byte, CMD_DAT2_REG
                                                  ; (copy byte in response)
                    CALL      i2c_write_byte_last ; Process Request
                    TEST      i2c_ctrl, BIT0
                    JUMP      NZ, COMMAND_FAILED

                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_READ_BYTE:
                    CALL      i2c_read_byte       ; Process Request

                    OUTPUT    i2c_byte, CMD_DAT2_REG
                                                  ; (copy byte in response)
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

PROCESS_I2C_READ_BYTE_LAST:
                    CALL      i2c_read_byte_last  ; Process Request

                    OUTPUT    i2c_byte, CMD_DAT2_REG
                                                  ; (copy byte in response)
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, 00
                    OUTPUT    ms1, CMD_DAT0_REG

                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1,CMD_CTRL_REG
                    RETURN

COMMAND_FAILED:     LOAD      ms1, DE             ; Response = 0xDEADCAFE
                    OUTPUT    ms1, CMD_DAT3_REG
                    LOAD      ms1, AD
                    OUTPUT    ms1, CMD_DAT2_REG
                    LOAD      ms1, CA
                    OUTPUT    ms1, CMD_DAT1_REG
                    LOAD      ms1, FE
                    OUTPUT    ms1, CMD_DAT0_REG
                    LOAD      ms1, 01             ; Send Response
                    OUTPUT    ms1, CMD_CTRL_REG
                    RETURN


; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; I2C Utility functions
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

; ------------------------------------------------------------------------------
; i2c_reg_write -
; IN: i2c_reg_adr, i2c_reg_data
; OUT: i2c_ctrl:BIT0 indicates ack success (1 = Nak)
; Modifies: (ms1, ms2), increments i2c_reg_adr
; CALL: i2c_send_start, i2c_write_byte
; ------------------------------------------------------------------------------
i2c_reg_write:      CALL      i2c_send_start      ; send start
                    LOAD      i2c_byte, i2c_dev_adr
                    CALL      i2c_write_byte      ; send device address byte
                    TEST      i2c_ctrl, BIT0
                    RETURN    NZ
                    LOAD      i2c_byte, i2c_reg_adr
                    ADD       i2c_reg_adr, 01
                    CALL      i2c_write_byte      ; send reg address byte
                    TEST      i2c_ctrl, BIT0
                    RETURN    NZ
                    LOAD      i2c_byte, i2c_reg_data
                    CALL      i2c_write_byte_last ; write reg data
                    RETURN       

; ------------------------------------------------------------------------------
; i2c_reg_read -
; IN: i2c_reg_adr, i2c_reg_data
; OUT: i2c_reg_data, i2c_ctrl:BIT0 indicates ack success (1 = Nak)
; Modifies: (ms1, ms2), increments i2c_reg_adr
; CALL: i2c_send_start, i2c_write_byte
; ------------------------------------------------------------------------------
i2c_reg_read:       CALL      i2c_send_start      ; send start
                    LOAD      i2c_byte, i2c_dev_adr
                    CALL      i2c_write_byte      ; send device address byte
                    TEST      i2c_ctrl, BIT0
                    RETURN    NZ
                    LOAD      i2c_byte, i2c_reg_adr
                    ADD       i2c_reg_adr, 01
                    CALL      i2c_write_byte      ; send reg address byte
                    TEST      i2c_ctrl, BIT0
                    RETURN    NZ
                    CALL      i2c_send_start      ; re-send start
                    LOAD      i2c_byte, i2c_dev_adr
                    OR        i2c_byte, BIT0      ; lsb indicates read
                    CALL      i2c_write_byte      ; send device address byte
                    TEST      i2c_ctrl, BIT0
                    RETURN    NZ
                                                  ; wait to handle case where
                                                  ; devices assert SCL low for pause
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    LOAD      delay_length, I2C_SCL_PERIOD
                    CALL      delay_Xus
                    
                    CALL      i2c_read_byte_last  ; read reg data
                    LOAD      i2c_ctrl, 00        ; set ack to 0 or success
                    RETURN       


; ------------------------------------------------------------------------------
; i2c_read_byte, i2c_read_byte_last
; IN: 
; OUT: i2c_byte is read byte, i2c_ctrl b0 indicates ack level
; Modifies: (ms1, ms2)
; CALL: i2c_write_read, i2c_send_stop if last
; ------------------------------------------------------------------------------
i2c_read_byte:      LOAD      i2c_ctrl, 00       ; assert ack
                    LOAD      i2c_byte, FF
                    JUMP      i2c_write_read
i2c_read_byte_last: LOAD      i2c_ctrl, 01       ; don't assert ack
                    LOAD      i2c_byte, FF
                    CALL      i2c_write_read
                    JUMP      i2c_send_stop

; ------------------------------------------------------------------------------
; i2c_write_byte, i2c_write_byte_last
; IN: i2c_byte is byte to write
; OUT: i2c_ctrl b0 indicates ack level
; Modifies: (ms1, ms2)
; CALL: i2c_write_read, i2c_send_stop if last or error
; ------------------------------------------------------------------------------
i2c_write_byte:     LOAD      i2c_ctrl, 01       ; look for ack
                    CALL      i2c_write_read
                    TEST      i2c_ctrl, BIT0      ; test ack
                    RETURN    Z
                    JUMP      i2c_send_stop
i2c_write_byte_last: LOAD     i2c_ctrl, 01       ; look for ack
                    CALL      i2c_write_read
                    JUMP      i2c_send_stop

; 
; ------------------------------------------------------------------------------
; i2c_write_read - do I2C Byte transfer
; IN: i2c_byte holds byte to write, i2c_ctrl b0 is ack level to drive
; OUT: i2c_byte holds read byte, i2c_ctrl b0 is ack level
; Modifies: ms1, ms2
; CALL: delay_Xus
; ------------------------------------------------------------------------------
i2c_write_read:     LOAD      ms2, 08              ; shift 8 bits
i2c_wr_loop:        SL0       i2c_byte            ; now carry holds bit to send
                    LOAD      ms1, 01
                    SLA       ms1                 ; now SDA_WE and b0 is send bit
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SCL_HIGH   ; SCL High
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV2
                    CALL      delay_Xus
                    INPUT     ms1, I2C_REG        ; read SDA level
                    AND       ms1, 01            ; mask off other bits
                    OR        i2c_byte, ms1       ; save read bit
                    LOAD      ms1, I2C_SCL_LOW    ; SCL Low
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    SUB       ms2, 01
                    JUMP      NZ, i2c_wr_loop
                    LOAD      ms1, i2c_ctrl       ; time for ack bit
                    AND       ms1, BIT0
                    OR        ms1, BIT1
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SCL_HIGH   ; SCL High
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV2
                    CALL      delay_Xus
                    INPUT     i2c_ctrl, I2C_REG   ; read SDA level
                    LOAD      ms1, I2C_SCL_LOW    ; SCL Low
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    RETURN       


; ------------------------------------------------------------------------------
; i2c_send_start - Sends I2C start
; IN: I2C_SCL_PERIOD
; OUT: I2C_REG
; Modifies: ms1
; CALL: delay_Xus
; ------------------------------------------------------------------------------
i2c_send_start:     LOAD      ms1, I2C_SDA_HIGH   ; make sure SDA is high
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SCL_HIGH   ; make sure SCL is high
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SDA_LOW    ; do start
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SCL_LOW    ; bring clock low for first bit
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    RETURN       
; 
; ------------------------------------------------------------------------------
; i2c_send_stop - Sends I2C stop
; IN: I2C_SCL_PERIOD
; OUT: I2C_REG
; Modifies: ms1
; CALL: delay_Xus
; ------------------------------------------------------------------------------
i2c_send_stop:      LOAD      ms1, I2C_SDA_LOW    ; make sure SDA is low
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SCL_HIGH   ; make sure SCL is high
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    LOAD      ms1, I2C_SDA_HIGH   ; do stop
                    OUTPUT    ms1, I2C_REG
                    LOAD      delay_length, I2C_SCL_PERIOD_DIV4
                    CALL      delay_Xus
                    RETURN       

; ------------------------------------------------------------------------------
; delay_Xus: Wait approximately X microseconds (based on CPU_MIPS)
; IN: delay_length: delay, in us, CPU_MIPS
; OUT:
; Modifies: ms1, delay_loop
; CALL:
; NOTES: CPU_MIPS must be at least 10 (20 Mhz)
; Actual delay is (X x CPU_MIPS + 1) instructions +1 for Call
; ------------------------------------------------------------------------------
delay_Xus: 
dxus_us:            LOAD      delay_loop, delay_value
                    SUB       delay_loop, 06       ; subtract off loop instructions
                    TEST      delay_loop, BIT0    ; is it even?
                    JUMP      Z, dxus_us2
                    SUB       delay_loop, 01       ; make even, and take a cycle
dxus_us2:           SUB       delay_loop, 02       ; decrement counter (2/loop)
                    JUMP      NZ, dxus_us2
                    SUB       delay_length, 01
                    JUMP      NZ, dxus_us
                    RETURN       

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Functions that run under interrupt
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

; ------------------------------------------------------------------------------
; Interrupt Service Routine
; ------------------------------------------------------------------------------
ISR: 
ISR_end:            RETURNI      DISABLE             ; done with inturrupt
; ******************************************************************************
                    ;ORG       $3FF                ; set interrupt vector
                    ADDRESS   3FF
                    JUMP      ISR                 ; 
; ******************************************************************************
                    ;VHDL      "PB_CODE_template.v", "..\top_level\PB_PSVIDEO_CONFIG.v", "PB_PSVIDEO_CONFIG"

